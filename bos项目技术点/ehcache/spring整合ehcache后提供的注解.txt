当把注解标注在类上 就是对整个类的所有方法都支持缓存

@Cacheable

classs A1{
}
 需要注意的是当一个支持缓存的方法在对象内部被调用时是不会触发缓存功能的

Spring在缓存方法的返回值时是以键值对进行缓存的，值就是方法的返回结果，至于键的话，Spring又支持两种策略，默认策略和自定义策略。


属性一 ：value

    必须指定的，其表示当前方法的返回值是会被缓存在哪个Cache上的，对应Cache的名称，
为ehcache.xml中的<cache name="myCache"/> 。其可以是一个Cache也可以是多个Cache，当需要指定多个Cache时其是一个数组。

属性二 ：key

    缓存的Key,当我们没有指定该属性时，Spring将使用默认策略生成key(表示使用方法的参数类型及参数值作为key),key属性是用来指定Spring缓存方法的返回结果时对应的key的。该属性支持SpringEL表达式。我们还可以自定义策略：自定义策略是指我们可以通过Spring的EL表达式来指定我们的key。这里的EL表达式可以使用方法参数及它们对应的属性。使用方法参数时我们可以直接使用“#参数名”或者“#p参数index”
    key的生成策略有两种：一种是默认策略，一种是自定义策略
       1默认的key生成策略是通过KeyGenerator生成的，其默认策略如下：
            1.如果方法没有参数，则使用0作为key。
            2.如果只有一个参数的话则使用该参数作为key。
            3.如果参数多余一个的话则使用所有参数的hashCode作为key
        2自定义策略是指我们可以通过Spring的EL表达式来指定我们的key。这里的EL表达式可以使用方法参数及它们对应的属性。使用方法参数时我们可以直接使用“#参数名”或者“#p参数index

属性三 ：condition

    有的时候我们可能并不希望缓存一个方法所有的返回结果。通过condition属性可以实现这一功能。
condition属性默认为空，表示将缓存所有的调用情形。其值是通过SpringEL表达式来指定的，当为true时表示进行缓存处理；当为false时表示不进行缓存处理，即每次调用该方法时该方法都会执行一次。如下示例表示只有当user的id为偶数时才会进行缓存
              @Cacheable(value={"users"}, key="#user.id", condition="#user.id%2==0")
              public User find(User user) {
                  System.out.println("find user by user " + user);
                  return user;
              }

属性五 ：beforeInvocation

    清除操作默认是在对应方法成功执行之后触发的，即方法如果因为抛出异常而未能成功返回时也不会触发清除操作。使用beforeInvocation可以改变触发清除操作的时间，当我们指定该属性值为true时，Spring会在调用该方法之前清除缓存中的指定元素。

@Cacheable(cacheNames = "cache名字",key="#"(spel表达式)):负责将方法的返回值加入到缓存中

//支持spel表达式语言  来拼接   getPageNumber getPageSize
	@Cacheable(key = "#pageable.pageNumber+'_'+#pageable.pageSize",cacheNames="standard")


@CacheEvict(value = "standard",allEntries = true)

value:便是清除操作发生在哪些 cache上  弱未指定则会使用默认册率生成的key
condition表示清除操作发生的条件。


@CachePut(value="myCache"):@CachePut标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，
而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。
使用它 不会管 你的缓存中是否有值 是否执行过之前的结果  每次执行 都会把返回值以键值对的方式存入缓存中


@Caching



@CacheConfig:




@Cacheable 应用缓存区，对方法返回结果进行缓存 ---- 用于查询方法
@CacheEvict 清除缓存区数据 --- 用于 增加、修改、删除 方法


通常在查询数据时，进行缓存， 在增加、修改、删除数据时，清除缓存 ！


注意： ehcache在初始化时，至少要配置缓存区域， 而且配置区域名称需要和 @Cacheable 注解中指定区域名称一致！！！

缓存跟新的处理:

  1.用@CachePut处理，这中方法需要对指定缓存key保持一致，尽管这样，还是不行，因为它返回的缓存是int(增加或删除或修改的记录数或是该记录的对象，这对我们查询所有或部分记录的缓存还是不可行的)

       2.用@CacheEvict(value="myCache",key="0",beforeInvocation=true)处理，清除我们指定key的缓存，这种方式缺点是麻烦，需要我们注意每一个缓存的key

       3.用@CacheEvict(value="myCache",allEntries=true,beforeInvocation=true)处理，清除所有缓存，这种方式最省事，但会把其他缓存也一同清除。

随着业务的复杂性的不断增加，这些处理方式，可能会增加代码的复杂性，
然后我想到的是对DB层进行缓存，可以利用redis，mamchched的进行处理。当然对于一般的web应用运用ehcache已经刻一解决了，但是对大数据量的运用db级别的缓存效果性能可能会更好。

你们有没有注意到缓存用的是默认的，而不是自己定义的name为myEhche的缓存。经过向大神讨教put added 0 on heap的意思是当缓存数量达到最大时存入磁盘，此时的0说明没有达到缓存数的最大值，所以不会向heap中写入数据。这样理解不知道正确不正确。
	  